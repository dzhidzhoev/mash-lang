// strings.mash

uses <bf>

// Something

var LnBreak = new(c_Chr(13) + c_Chr(10))

// Base functions

proc c_Ord(char):
  push char
  chord
  gpm
end


proc c_Chr(wrd):
  push wrd
  ordch
  gpm
end


proc s_Len(s):
  push s
  alen
  //strl
  gpm
end


proc s_Del(s, from, count):
  push from
  push count
  push s
  strd
end


func s_Copy(s, from, count):
  var r = copy(s)
  s_del(r, from + count + 1, s_len(r))
  s_del(r, 1, from - 1)
  return r
end


// String reverse function

func s_Reverse(s):
  var i, l, prf, r, t, t2
  l ?= s_len(s)
  if l > 0:
    if (l % 2) <> 0:
      prf ?= s[1]
      s ?= copy(s)
      s_del(s, 1, 1)
    else:
      prf ?= ""
    end
    t ?= s_copy(s, 1, l \ 2 - 1)
    t2 ?= s_copy(s, l \ 2 + 1, l)

    l = s_len(t)
    i ?= 0
    while i < l:
      r ?= t[i + 1]
      t[i + 1] ?= t2[l - i])
      t2[l - i] ?= r
      inc i
    end

    r ?= t + t2 + prf
    return r
  else:
    return ""
  end
end


// Substring copy functions

func s_LeftStr(s, count):
  return s_copy(s, 1, count)
end


func s_RightStr(s, count):
  return s_copy(s, s_len(s) - count + 1, count)
end


// Pos & PosEx - find substring start (and N start) functions

func s_Pos(sb, s):
  var p, t, t2, l, sub_l, b

  l ?= s_len(s) + 2
  sub_l ?= s_len(sb)

  b ?= false
  p ?= 1
  while p < l:
    if b:
      return p - 1
    end

    b = false

    if sb[1] == s[p]:
      b = true
      if len(sb) > 1:
        t2 ?= copy(p)

        for (t ?= 2; t < sub_l; inc t):
          inc t2
          if sb[t] <> s[t2]:
            b = false
            break
          end
        end

        if b == false:
          p = t2
        end
      end
    end

    inc p
  end
  return 0
end


func s_PosEx(sb, s, num):
  var p, t, t2, l, sub_l, b

  l ?= s_len(s) + 2
  sub_l ?= s_len(sb)

  b ?= false
  p ?= 1
  while p < l:
    if b:
      if num > 1:
        dec num
      else:
        return p - 1
      end
    end

    b = false

    if sb[1] == s[p]:
      b = true
      if len(sb) > 1:
        b = true
        t2 ?= copy(p)

        for (t ?= 2; t < sub_l; inc t):
          inc t2
          if sb[t] <> s[t2]:
            b = false
            break
          end
        end

        if b == false:
          p = t2
        end
      end
    end

    inc p
  end
  return 0
end


// String trimming functions

func s_TrimLeft(s):
  var r = copy(s)
  while s_len(r) > 0:
    if r[1] == " ":
      s_del(r, 1, 1)
    else:
      break
    end
  end
  return r
end


func s_TrimRight(s):
  var r = copy(s)
  while s_len(r) > 0:
    if r[s_len(r)] == " ":
      s_del(r, s_len(r), 1)
    else:
      break
    end
  end
  return r
end


func s_Trim(s):
  var r = copy(s)
  r = s_trimright(r)
  r = s_trimleft(r)
  return r
end


// Substring replase function

enum s_ReplaceFlags [srfReplaceAll, srfIgnoreCase]

func s_Replace(s, from, to, flags):
  var r = copy(s), p
  if srfIgnoreCase in flags:
    p ?= s_Pos(StrUpper(from), StrUpper(r))
  else:
    p ?= s_Pos(from, r)
  end
  while p > 0:
    s ?= s_Copy(r, p + s_Len(from), s_Len(r))
    r = s_Copy(r, 1, p - 2) + to + s
    if srfIgnoreCase in flags:
      p = s_Pos(StrUpper(from), StrUpper(r))
    else:
      p = s_Pos(from, r)
    end
  end
  if srfReplaceAll in flags:
    if srfIgnoreCase in flags:
      p = s_Pos(from, StrUpper(r))
    else:
      p = s_Pos(from, r)
    end
    if p > 0:
      r = s_Replace(r, from, to, flags)
    end
  end
  return r
end
