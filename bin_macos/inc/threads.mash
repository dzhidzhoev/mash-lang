// Mash lang threads unit
// Code version: 1.0

uses <bf>

// common methods

proc thread(method, arg):
  push arg
  push method
  cthr
end

proc async(method, arg):
  push arg
  push method
  cthr
  pcopy
  rthr
end

proc thr_resume(thr):
  push thr
  rthr
end

proc thr_suspend(thr):
  push thr
  sthr
end

proc thr_terminate(thr):
  push thr
  tthr
end

proc thr_kill(thr):
  thr_suspend(thr)
  thr_terminate(thr)
end

////////////////////////////////////////////////////////////////////////////////
// Thread controller class
////////////////////////////////////////////////////////////////////////////////

class TThread:
  public:
    var Resumed, Terminated, FreeOnTerminate
    proc Execute, Create, Free, Suspend, Resume, Terminate, ReJoin
  protected:
    var ThreadContext
end

proc TThread::Execute():
  // method for overriding
end

proc TThread_Join(CurrentThreadContext, ThreadClass):
  ThreadClass->Execute()
  ThreadClass->Terminated = true
  if ThreadClass->FreeOnTerminate:
    ThreadClass->Free()
  end
end

proc TThread::Create(Resumed):
  $Resumed ?= new(false)
  $Terminated ?= new(false)
  $FreeOnTerminate ?= new(true)
  $ThreadContext ?= thread(TThread_Join, $)
  if Resumed:
    $Resume()
  end
end

proc TThread::Free():
  Free($Resumed, $Terminated, $FreeOnTerminate, $)
end

proc TThread::ReJoin(Resumed):
  $ThreadContext ?= thread(TThread_Join, $)
  if Resumed:
    $Resume()
  end
end

proc TThread::Suspend():
  thr_suspend($ThreadContext)
  $Resumed = false
end

proc TThread::Resume():
  thr_resume($ThreadContext)
  $Resumed = true
end

proc TThread::Terminate():
  thr_terminate($ThreadContext)
  $Terminated = true
  if $FreeOnTerminate:
    $Free()
  end
end
