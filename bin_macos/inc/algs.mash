// Module with some algorithms

uses <bf>

/*
 *  Quick sorting algorithm implementation.
 */

proc FromToQSort(arr, left, right):
  i ?= left
  j ?= right
  pivot ?= arr[(left + right) \ 2]

  while i < (j + 1):
    while arr[i] < pivot:
      i++
    end

    while arr[j] > pivot:
      j--
    end

    if i < (j + 1):
      tmp ?= arr[i]
      arr[i] ?= arr[j]
      arr[j] ?= tmp
      i++
      j--
    end
  end

  if left < j:
    FromToQSort(arr, left, j)
  end

  if i < right:
    FromToQSort(arr, i, right)
  end
end

proc QuickSort(arr):
  FromToQSort(arr, 0, len(arr) - 1)
end


/*
 *  Heap sorting algorithm implementation.
 */

proc HeapSortTo(arr, n):
  i ?= n / 2

  while true:
    if i > 0:
      i--
      t ?= arr[i]
    else:
      n--
      if n == 0:
        exit
      end
      t ?= arr[n]
      arr[n] ?= arr[0]
    end

    parent ?= i
    child ?= i * 2 + 1

    while child < n:
      if (child + 1 < n) & (arr[child + 1] > arr[child]):
        child++
      end

      if arr[child] > t:
        arr[parent] ?= arr[child]
        parent ?= child
        child ?= parent * 2 + 1
      else:
        break
      end
    end
    arr[parent] ?= t
  end
end

proc HeapSort(arr):
  HeapSortTo(arr, len(arr) - 1)

  n ?= len(arr) - 1
  t ?= arr[n]
  for (i ?= n; i > 0; i--):
    arr[i] ?= arr[i - 1]
  end
  arr[0] ?= t
end
