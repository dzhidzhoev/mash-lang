/*
 *  Mash I/O & Memory streams
 */

uses <bf>

// imports

import _Stream_Create                 "libstreams.lib" "_Stream_Create"
import _Stream_Seek                   "libstreams.lib" "_Stream_Seek"
import _Stream_GetCaretPos            "libstreams.lib" "_Stream_GetCaretPos"
import _Stream_WriteFromMemoryStream  "libstreams.lib" "_Stream_WriteFromStream"
import _Stream_ReadFromMemoryStream   "libstreams.lib" "_Stream_ReadFromStream"
import _Stream_CopyFromStream         "libstreams.lib" "_Stream_CopyFromStream"
import _Stream_WriteByte              "libstreams.lib" "_Stream_WriteByte"
import _Stream_WriteWord              "libstreams.lib" "_Stream_WriteWord"
import _Stream_WriteInt               "libstreams.lib" "_Stream_WriteInt"
import _Stream_WriteFloat             "libstreams.lib" "_Stream_WriteFloat"
import _Stream_WriteStr               "libstreams.lib" "_Stream_WriteStr"
import _Stream_ReadByte               "libstreams.lib" "_Stream_ReadByte"
import _Stream_ReadWord               "libstreams.lib" "_Stream_ReadWord"
import _Stream_ReadInt                "libstreams.lib" "_Stream_ReadInt"
import _Stream_ReadFloat              "libstreams.lib" "_Stream_ReadFloat"
import _Stream_ReadStr                "libstreams.lib" "_Stream_ReadStr"
import _Stream_GetSize                "libstreams.lib" "_Stream_GetSize"
import _Stream_Clear                  "libstreams.lib" "_Stream_Clear"
import _Stream_Free                   "libstreams.lib" "_Stream_Free"
import _MemoryStream_Create           "libstreams.lib" "_MemoryStream_Create"
import _MemoryStream_Free             "libstreams.lib" "_MemoryStream_Free"
import _MemoryStream_LoadFromStream   "libstreams.lib" "_MemoryStream_LoadFromStream"
import _MemoryStream_StoreToStream    "libstreams.lib" "_MemoryStream_StoreToStream"
import _MemoryStream_LoadFromFile     "libstreams.lib" "_MemoryStream_LoadFromFile"
import _MemoryStream_SaveToFile       "libstreams.lib" "_MemoryStream_SaveToFile"
import _FileStream_Create             "libstreams.lib" "_FileStream_Create"
import _FileStream_Free               "libstreams.lib" "_FileStream_Free"

/*
 *  Base TStream class
 */

enum TSeekOffset [soStart, soCurrent, soEnd]

class TStream:
  private:
    // pointer to external TStream class
    var StreamPtr

  public:
    // constructor & destructor
    proc Create, Free

    // main methods
    proc Seek, Clear
    func GetCaretPos, GetSize

    // streams operations
    proc WriteFromMemoryStream, ReadFromMemoryStream, CopyFromStream

    // writers
    proc Write, WriteU, WriteByte, WriteWord, WriteInt, WriteFloat, WriteStr

    // readers
    proc ReadByte, ReadWord, ReadInt, ReadFloat, ReadStr
end

// constructor & destructor

proc TStream::Create():
  if argcount > 0:
    pop resource
    $StreamPtr ?= ?resource
  else:
    $StreamPtr ?= _Stream_Create()
  end
end

proc TStream::Free():
  _Stream_Free($StreamPtr, $)
end

// some methods

proc TStream::Seek(pos, offset):
  _Stream_Seek($StreamPtr, pos, offset)
end

proc TStream::Clear():
  _Stream_Clear($StreamPtr)
end

func TStream::GetCaretPos():
  return gpmx(_Stream_GetCaretPos($StreamPtr))
end

func TStream::GetSize():
  return gpmx(_Stream_GetSize($StreamPtr))
end

// stream operations

proc TStream::WriteFromMemoryStream(mstream, size):
  _Stream_WriteFromMemoryStream($StreamPtr, mstream, size)
end

proc TStream::ReadFromMemoryStream(mstream, size):
  _Stream_ReadFromMemoryStream($StreamPtr, mstream, size)
end

proc TStream::CopyFromStream(mstream, size):
  _Stream_ReadFromMemoryStream($StreamPtr, mstream, size)
end

// writers

proc TStream::Write():
  var t
  t ?= argcount
  while t > 0:
    $WriteU()
    dec t
  end
end

proc TStream::WriteU(value):
  switch typeof(value):

    case typeWord:
      $WriteWord(value)
      break
    end

    case typeInt:
      $WriteInt(value)
      break
    end

    case typeReal:
      $WriteFloat(value)
      break
    end

    case typeStr:
      $WriteStr(value)
      break
    end

    else:
      raise "With TStream: I/O error, invalid type cast!"
  end
end

proc TStream::WriteByte(value):
  _Stream_WriteByte($StreamPtr, value)
end

proc TStream::WriteWord(value):
  _Stream_WriteWord($StreamPtr, value)
end

proc TStream::WriteInt(value):
  _Stream_WriteInt($StreamPtr, value)
end

proc TStream::WriteFloat(value):
  _Stream_WriteFloat($StreamPtr, value)
end

proc TStream::WriteStr(value):
  _Stream_WriteStr($StreamPtr, value)
end

// readers

proc TStream::ReadByte(value):
  _Stream_ReadByte($StreamPtr, value)
end

proc TStream::ReadWord(value):
  _Stream_ReadWord($StreamPtr, value)
end

proc TStream::ReadInt(value):
  _Stream_ReadInt($StreamPtr, value)
end

proc TStream::ReadFloat(value):
  _Stream_ReadFloat($StreamPtr, value)
end

proc TStream::ReadStr(value, ln):
  _Stream_ReadStr($StreamPtr, value, ln)
end

/*
 *  TMemoryStream class
 */

class TMemoryStream(TStream):
  public:
    // constructor & destructor
    proc Create, Free

    // some methods
    proc LoadFromStream, StoreToStream, LoadFromFile, SaveToFile
end

// constructor & destructor

proc TMemoryStream::Create():
  if argcount > 0:
    pop resource
    $StreamPtr ?= ?resource
  else:
    $StreamPtr ?= _MemoryStream_Create()
  end
end

proc TMemoryStream::Free():
  _MemoryStream_Free($StreamPtr, $)
end

// some methods

proc TMemoryStream::LoadFromStream(mstream):
  _MemoryStream_LoadFromStream($StreamPtr, mstream)
end

proc TMemoryStream::StoreToStream(mstream):
  _MemoryStream_StoreToStream($StreamPtr, mstream)
end

proc TMemoryStream::LoadFromFile(fpath):
  _MemoryStream_LoadFromFile($StreamPtr, fpath)
end

proc TMemoryStream::SaveToFile(fpath):
  _MemoryStream_SaveToFile($StreamPtr, fpath)
end

/*
 *  TFileStream
 */

class TFileStream(TStream):
  public:
    // constructor & destructor
    proc Create, Free
end

// TFileStream modes

word fmCreate         0xFF00
word fmOpenRead       0x0000
word fmOpenWrite      0x0001
word fmOpenReadWrite  0x0002

word fmShareCompat    0x0000
word fmShareExclusive 0x0010
word fmShareDenyWrite 0x0020
word fmShareDenyRead  0x0030
word fmShareDenyNone  0x0040

// constructor & destructor

proc TFileStream::Create(fpath, openmode):
  $StreamPtr ?= _FileStream_Create(fpath, openmode)
end

proc TFileStream::Free():
  _FileStream_Free($StreamPtr, $)
end
