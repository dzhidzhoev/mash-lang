uses <bf>
uses <crt>

/*
 *  Timsort sorting algorithm.
 *  Written on Mash!
 */

var _run = 32

proc insertionSort(arr, left, right):
  for(i ?= left + 1; i <= right; i++):
    tmp ?= arr[i]
    j ?= i - 1
    while j >= left:
      if arr[j] > tmp:
        arr[j+1] ?= arr[j]
      else:
        break
      end
      j--
    end
    arr[j+1] ?= tmp
  end
end

// merge function merges the sorted runs
proc merge(arr, l, m, r):
  // original array is broken in two parts
  // left and right array
  len1 ?= m - l + 1
  len2 ?= r - m
  left ?= new[len1]
  right ?= new[len2]

  for(i ?= 0; i < len1; i++):
    left[i] ?= arr[l + i]
  end

  for (i ?= 0; i < len2; i++):
    right[i] ?= arr[m + 1 + i]
  end

  i ?= 0
  j ?= 0
  k ?= copy(l)

  // after comparing, we merge those two array
  // in larger sub array
  while (i < len1) & (j < len2):
    if left[i] <= right[j]:
      arr[k] ?= left[i]
      i++
    else:
      arr[k] ?= right[j]
      j++
    end
    k++
  end

  // copy remaining elements of left, if any
  while i < len1:
    arr[k] ?= left[i]
    k++
    i++
  end

  // copy remaining element of right, if any
  while j < len2:
    arr[k] ?= right[j]
    k++
    j++
  end
end

func min(a, b):
  if a > b:
    return b
  else:
    return a
  end
end

// iterative Timsort function to sort the
// array[0...n-1] (similar to merge sort)
proc timSort(arr, n):
  // Sort individual subarrays of size RUN
  for (i ?= 0; i < n; i += _run):
    insertionSort(arr, i, min(i + 31, n - 1))
  end

  // start merging from size RUN (or 32). It will merge
  // to form size 64, then 128, 256 and so on ....
  for (size ?= _run; size < n; size *= 2):
    // pick starting point of left sub array. We
    // are going to merge arr[left..left+size-1]
    // and arr[left+size, left+2*size-1]
    // After every merge, we increase left by 2*size
    for (left ?= 0; left < n; left += 2 * size):
      // find ending point of left sub array
      // mid+1 is starting point of right sub array
      mid ?= left + size - 1
      right ?= min(left + 2*size - 1, n-1)

      // merge sub array arr[left.....mid] &
      // arr[mid+1....right]
      merge(arr, left, mid, right)
    end
  end
end


/*
 *  Print array into console.
 *  Written on Mash!
 */

proc PrintArray(array):
  for (i ?= 0; i < len(array); i++):
    Print(array[i], " ")
  end
  PrintLn(" ")
end



proc main():
  arr ?= new[1000]

  for (i ?= 0; i < 1000; i++):
    arr[999 - i] ?= copy(i)
  end

  t1 ?= TickCnt()
  //insertionSort(arr, 0, 10)
  TimSort(arr, 1000)
  t2 ?= TickCnt() - t1
  PrintLn("Time of sorting: " + t2 + " ms.")

  PrintArray(arr)

  gc()
  InputLn()
end
